// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: proto/books_storage.proto

package books_storage

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BooksStorageClient is the client API for BooksStorage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BooksStorageClient interface {
	GetBooksByAuthor(ctx context.Context, in *Author, opts ...grpc.CallOption) (*Books, error)
	GetAuthorsByBook(ctx context.Context, in *Book, opts ...grpc.CallOption) (*Authors, error)
}

type booksStorageClient struct {
	cc grpc.ClientConnInterface
}

func NewBooksStorageClient(cc grpc.ClientConnInterface) BooksStorageClient {
	return &booksStorageClient{cc}
}

func (c *booksStorageClient) GetBooksByAuthor(ctx context.Context, in *Author, opts ...grpc.CallOption) (*Books, error) {
	out := new(Books)
	err := c.cc.Invoke(ctx, "/books_storage.BooksStorage/GetBooksByAuthor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *booksStorageClient) GetAuthorsByBook(ctx context.Context, in *Book, opts ...grpc.CallOption) (*Authors, error) {
	out := new(Authors)
	err := c.cc.Invoke(ctx, "/books_storage.BooksStorage/GetAuthorsByBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BooksStorageServer is the server API for BooksStorage service.
// All implementations must embed UnimplementedBooksStorageServer
// for forward compatibility
type BooksStorageServer interface {
	GetBooksByAuthor(context.Context, *Author) (*Books, error)
	GetAuthorsByBook(context.Context, *Book) (*Authors, error)
	mustEmbedUnimplementedBooksStorageServer()
}

// UnimplementedBooksStorageServer must be embedded to have forward compatible implementations.
type UnimplementedBooksStorageServer struct {
}

func (UnimplementedBooksStorageServer) GetBooksByAuthor(context.Context, *Author) (*Books, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBooksByAuthor not implemented")
}
func (UnimplementedBooksStorageServer) GetAuthorsByBook(context.Context, *Book) (*Authors, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthorsByBook not implemented")
}
func (UnimplementedBooksStorageServer) mustEmbedUnimplementedBooksStorageServer() {}

// UnsafeBooksStorageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BooksStorageServer will
// result in compilation errors.
type UnsafeBooksStorageServer interface {
	mustEmbedUnimplementedBooksStorageServer()
}

func RegisterBooksStorageServer(s grpc.ServiceRegistrar, srv BooksStorageServer) {
	s.RegisterService(&BooksStorage_ServiceDesc, srv)
}

func _BooksStorage_GetBooksByAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Author)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BooksStorageServer).GetBooksByAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/books_storage.BooksStorage/GetBooksByAuthor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BooksStorageServer).GetBooksByAuthor(ctx, req.(*Author))
	}
	return interceptor(ctx, in, info, handler)
}

func _BooksStorage_GetAuthorsByBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Book)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BooksStorageServer).GetAuthorsByBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/books_storage.BooksStorage/GetAuthorsByBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BooksStorageServer).GetAuthorsByBook(ctx, req.(*Book))
	}
	return interceptor(ctx, in, info, handler)
}

// BooksStorage_ServiceDesc is the grpc.ServiceDesc for BooksStorage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BooksStorage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "books_storage.BooksStorage",
	HandlerType: (*BooksStorageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBooksByAuthor",
			Handler:    _BooksStorage_GetBooksByAuthor_Handler,
		},
		{
			MethodName: "GetAuthorsByBook",
			Handler:    _BooksStorage_GetAuthorsByBook_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/books_storage.proto",
}
